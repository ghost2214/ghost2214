import ccxt
import time

# Replace with your exchange API key and secret
api_key = 'YOUR_API_KEY'
api_secret = 'YOUR_API_SECRET'

# Replace with your desired trading pair and exchange
symbol = 'BTC/USDT'
exchange_name = 'binance'

# Parameters for the simple moving average (SMA) strategy
sma_short_period = 10
sma_long_period = 30

def initialize_exchange():
    exchange_class = getattr(ccxt, exchange_name)
    exchange = exchange_class({
        'apiKey': api_key,
        'secret': api_secret,
        'timeout': 30000,
        'enableRateLimit': True,
    })
    return exchange

def fetch_ohlcv(exchange, symbol, timeframe='1m'):
    return exchange.fetch_ohlcv(symbol, timeframe)

def calculate_sma(prices, period):
    if len(prices) < period:
        return None
    return sum(prices[-period:]) / period

def main():
    exchange = initialize_exchange()

    while True:
        try:
            ohlcv = fetch_ohlcv(exchange, symbol)
            close_prices = [x[4] for x in ohlcv]

            sma_short = calculate_sma(close_prices, sma_short_period)
            sma_long = calculate_sma(close_prices, sma_long_period)

            balance = exchange.fetch_balance()
            base_currency = symbol.split('/')[0]
            quote_currency = symbol.split('/')[1]
            base_balance = balance[base_currency]['free']
            quote_balance = balance[quote_currency]['free']

            if sma_short is not None and sma_long is not None:
                if sma_short > sma_long:
                    # Buy signal
                    if quote_balance > 0:
                        order = exchange.create_market_buy_order(symbol, quote_balance)
                        print('Buy order executed:', order)
                elif sma_short < sma_long:
                    # Sell signal
                    if base_balance > 0:
                        order = exchange.create_market_sell_order(symbol, base_balance)
                        print('Sell order executed:', order)

            time.sleep(60)

        except Exception as e:
            print('Error:', e)
            time.sleep(60)

if __name__ == '__main__':
    main()
